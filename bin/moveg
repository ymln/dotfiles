#!/usr/bin/zsh
SIZE=10M
ANNEX=~/annex
MOVIES=~/annex/film
TV=~/annex/tv

error() {
    echo Error: $@ 1>&2
}

log() {
    #echo Log: $@ 1>&2
}

prop() {
    log getting prop $2
    result=`echo $1 | jshon -Q -e $2 -u`
    log result: $result
    echo $result
}

extension() {
    echo ${1##*.}
}

srt() {
    echo ${1%.*}.srt
}

mvf() {
    from=$1
    to=$2
    log moving $1 to $2
    mv -i $1 $2
}

move_file() {
    log moving file $1
    json=`guessit --json $1`
    log received JSON $json
    title=`prop $json title`
    extension=`extension $1`
    case `prop $json type` in
        episode)
            season=`prop $json season`
            episode=`prop $json episode`
            if [ -z $title -o -z $season -o -z $episode -o -z $extension ]; then
                error could not find necessary params for $1
            else
                log making dir $title
                mkdir -p $TV/$title
                newname=S$(printf %02d $season)E$(printf %02d $episode).$extension
                mvf $1 $TV/$title/$newname
                if [ -e `srt $1` ]; then
                    mvf `srt $1` `srt $tv/$title/$newname`
                fi
            fi
            ;;
        movie)
            if [ -z $title -o -z $extension ]; then
                error could not find necessary params for $1
            else
                mvf $1 $MOVIES/${title}.$extension
                if [ -e `srt $1` ]; then
                    mvf `srt $1` `srt $MOVIES/${title}.$extension`
                fi
            fi
            ;;
        *)
            error could not determine type of $1
            ;;
    esac
}

run() {
    if [ -d $1 ]; then
        pushd $1
        log $1 is a directory
        found=
        for file in *; do
            json=`guessit --json $file`
            log received JSON $json
            mimetype=`prop $json mimetype`
            log mimetype is $mimetype
            if [[ $mimetype == video/* ]]; then
                move_file $file
                found=1
            fi
        done
        popd
        if [ $found ]; then
            rm -r $1
        fi
    elif [ -e $1 -o -L $1 ]; then
        log $1 is a file
        move_file $1
    else
        error couldn\'t find $1
    fi
}

for param in $@; do
    run $param
done
